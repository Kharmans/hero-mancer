name: Module Builder

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitattributes'
      - '.gitignore'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.set-release-notes.outputs.release-notes }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Version from Commit Message
        id: get-version
        run: |
          version=$(git log -1 --pretty=%B | grep -o -E '[v]?[0-9]+\.[0-9]+\.[0-9]+' | sed 's/^v//')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Extracted version: $version"

      - name: Set Release Notes from Commit Description
        id: set-release-notes-github
        run: |
          release_notes=$(git log -1 --pretty=%B | grep '^-' | sed 's/^ //')
          echo "release-notes-github<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "$release_notes" > release_notes.txt

      - name: Format Release Notes for Discord
        id: format-release-notes-discord
        run: |
          DISCORD_NOTES=$(awk '{printf "%s\\n", $0}' release_notes.txt | sed 's/\\n$//')
          echo "::set-output name=release-notes-discord::$DISCORD_NOTES"

      - name: Update module.json with Version
        run: node .github/workflows/update-module.js ${{ steps.get-version.outputs.version }}

      - name: Zip Files
        working-directory: ./
        run: |
          zip -r ./module.zip ./ -x "README.md" "CHANGELOG.md" "LICENSE" "TODO.md" ".gitattributes" ".gitignore" "tour-assets/*" "release_notes.txt" ".git/" ".github/"


      - name: Create Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: Release ${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false
          body: ${{ env.release-notes-github }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.zip, ./module.json'
          tag: ${{ steps.get-version.outputs.version }}

      - name: Release Foundry Package
        run: |
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}"
          curl -X POST "https://api.foundryvtt.com/_api/packages/release_version" \
          -H "Content-Type: application/json" \
          -H "Authorization: ${{ secrets.FOUNDRY_API_TOKEN }}" \
          -d '{
            "id": "'"hero-mancer"'",
            "release": {
              "version": "'"${{ steps.get-version.outputs.version }}"'",
              "manifest": "'"${REPO_URL}/releases/latest/download/module.json"'",
              "download": "'"${REPO_URL}/releases/download/${{ steps.get-version.outputs.version }}/module.zip"'",
              "notes": "'"${REPO_URL}/releases/tag/${{ steps.get-version.outputs.version }}"'",
              "compatibility": {
                "minimum": "'"12.331"'",
                "verified": "'"12.331"'",
                "maximum": "'"12.999"'"
              }
            }
          }'

      - name: Post to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}"
          VERSION="${{ steps.get-version.outputs.version }}"
          RELEASE_NOTES="${{ steps.format-release-notes-discord.outputs.release-notes-discord }}"

          # Format the release notes to handle newlines correctly
          CLEAN_RELEASE_NOTES=$(echo -e "$RELEASE_NOTES")
          
          # Create JSON payload with fields for version, links, and release notes
          JSON_PAYLOAD=$(jq -n \
            --arg title "Hero Mancer Release" \
            --arg version "$VERSION" \
            --arg foundry_url "https://foundryvtt.com/packages/hero-mancer" \
            --arg release_url "$REPO_URL/releases/download/$VERSION/module.json" \
            --arg download_url "$REPO_URL/releases/download/$VERSION/module.zip" \
            --arg release_notes "$CLEAN_RELEASE_NOTES" \
            '{embeds: [{
              title: $title,
              fields: [
                {name: "Version", value: $version, inline: true},
                {name: "Core Compatibility", value: "V12.331", inline: true},
                {name: "System Compatibility", value:"3.3.1+", inline: true},
                {name: "Foundry Package", value: $foundry_url, inline: false},
                {name: "Release Tag", value: $release_url, inline: false},
                {name: "Manual Download", value: $download_url, inline: false},
                {name: "Release Notes", value: $release_notes, inline: false}
              ]
            }]}')

          # Post to Discord
          curl -H "Content-Type: application/json" \
               -d "$JSON_PAYLOAD" \
               $DISCORD_WEBHOOK
